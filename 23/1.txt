#include <iostream>
#include <string>
#include <sstream>
#include <cstdlib> // for abs()
using namespace std;

class Fraction {
public:
    Fraction(int numerator, int denominator);

    string toString();
    double toDouble();

    // Arithmetic operations
    Fraction plus(Fraction that);
    Fraction minus(Fraction that);
    Fraction times(Fraction that);
    Fraction by(Fraction that);

private:
    int numerator;
    int denominator;

    void reduce(); // Reduces fraction to lowest terms
    static int gcd(int a, int b); // Euclidean algorithm
};

Fraction::Fraction(int num, int den) {
    if (den < 0) {
        num = -num;
        den = -den;
    }
    numerator = num;
    denominator = den;
    reduce(); // Reduce on creation
}

int Fraction::gcd(int a, int b) {
    while (b != 0) {
        int temp = b;
        b = a % b;
        a = temp;
    }
    return abs(a);
}

void Fraction::reduce() {
    int divisor = gcd(numerator, denominator);
    numerator /= divisor;
    denominator /= divisor;
}

double Fraction::toDouble() {
    return static_cast<double>(numerator) / denominator;
}

string Fraction::toString() {
    if (numerator == 0) {
        return "0";
    }

    int wholePart = numerator / denominator;
    int remainder = abs(numerator % denominator);
    stringstream ss;

    if (remainder != 0 && abs(numerator) >= denominator) {
        ss << wholePart << " " << remainder << "/" << denominator;
    } else if (abs(numerator) < denominator) {
        ss << numerator << "/" << denominator;
    } else {
        ss << wholePart;
    }

    return ss.str();
}


// Arithmetic implementations
Fraction Fraction::plus(Fraction that) {
    int num = numerator * that.denominator + that.numerator * denominator;
    int den = denominator * that.denominator;
    return Fraction(num, den);
}

Fraction Fraction::minus(Fraction that) {
    int num = numerator * that.denominator - that.numerator * denominator;
    int den = denominator * that.denominator;
    return Fraction(num, den);
}

Fraction Fraction::times(Fraction that) {
    int num = numerator * that.numerator;
    int den = denominator * that.denominator;
    return Fraction(num, den);
}

Fraction Fraction::by(Fraction that) {
    int num = numerator * that.denominator;
    int den = denominator * that.numerator;
    if (den < 0) {
        num = -num;
        den = -den;
    }
    return Fraction(num, den);
}

int main() {
    string input1, input2;
    cout << "Enter first fraction (e.g., 3 / 4): ";
    getline(cin, input1);
    cout << "Enter second fraction (e.g., 1 / 3): ";
    getline(cin, input2);

    int num1, den1, num2, den2;
    char slash;

    stringstream ss1(input1);
    ss1 >> num1 >> slash >> den1;

    stringstream ss2(input2);
    ss2 >> num2 >> slash >> den2;

    Fraction f1(num1, den1);
    Fraction f2(num2, den2);

    Fraction sum = f1.plus(f2);
    Fraction diff = f1.minus(f2);
    Fraction prod = f1.times(f2);
    Fraction quot = f1.by(f2);

    cout << f1.toString() << " + " << f2.toString() << " = " << sum.toString() << endl;
    cout << f1.toString() << " - " << f2.toString() << " = " << diff.toString() << endl;
    cout << f1.toString() << " * " << f2.toString() << " = " << prod.toString() << endl;
    cout << f1.toString() << " / " << f2.toString() << " = " << quot.toString() << endl;

    return 0;
}
