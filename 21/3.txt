#include <iostream>
#include <string>
using namespace std;

class FlightBooking {
public:
    FlightBooking() : id(0), capacity(0), reserved(0) {}
    FlightBooking(int id, int capacity);
    void printStatus() const;
    bool addReservations(int n);
    bool cancelReservations(int n);
    int getId() const;
    void deleteFlight();

private:
    int id;
    int capacity;
    int reserved;
    int maxReservation() const;
};

FlightBooking::FlightBooking(int id, int capacity) {
    this->id = id;
    this->capacity = capacity;
    this->reserved = 0;
}

void FlightBooking::deleteFlight() {
    id = 0;
}

int FlightBooking::getId() const {
    return id;
}

int FlightBooking::maxReservation() const {
    return static_cast<int>(capacity * 1.05 + 0.5);
}

void FlightBooking::printStatus() const {
    if (id == 0) return;
    int percent = (capacity == 0) ? 0 : static_cast<int>((100.0 * reserved) / capacity + 0.5);
    cout << "Flight " << id << " : " << reserved << "/" << capacity
         << " (" << percent << "%) seats reserved" << endl;
}

bool FlightBooking::addReservations(int n) {
    if (n < 0 || reserved + n > maxReservation())
        return false;
    reserved += n;
    return true;
}

bool FlightBooking::cancelReservations(int n) {
    if (n < 0 || reserved - n < 0)
        return false;
    reserved -= n;
    return true;
}

int main() {
    const int MAX_FLIGHTS = 10;
    FlightBooking flights[MAX_FLIGHTS];

    string command;
    while (true) {
        cout << "Available commands: create [id] [capacity], delete [id], add [id] [n], cancel [id] [n], quit" << endl;
        cout << "Enter command: ";
        getline(cin, command);

        if (command == "quit") break;

        size_t first_space = command.find(' ');
        if (first_space == string::npos) {
            cout << "Invalid command format" << endl;
            continue;
        }

        string action = command.substr(0, first_space);

        size_t second_space = command.find(' ', first_space + 1);
        string id_str, value_str;

        if (second_space == string::npos) {
            id_str = command.substr(first_space + 1);
            value_str = "";
        } else {
            id_str = command.substr(first_space + 1, second_space - first_space - 1);
            value_str = command.substr(second_space + 1);
        }

        if (id_str.empty() || (action != "delete" && value_str.empty())) {
            cout << "Invalid command format" << endl;
            continue;
        }

        int id = stoi(id_str);
        int value = (value_str.empty() ? 0 : stoi(value_str));

        if (action == "create") {
            if (id <= 0 || value <= 0) {
                cout << "Cannot perform this operation: invalid id or capacity" << endl;
                continue;
            }

            bool exists = false;
            for (int i = 0; i < MAX_FLIGHTS; ++i) {
                if (flights[i].getId() == id) {
                    exists = true;
                    break;
                }
            }
            if (exists) {
                cout << "Cannot perform this operation: flight already exists" << endl;
                continue;
            }

            bool placed = false;
            for (int i = 0; i < MAX_FLIGHTS; ++i) {
                if (flights[i].getId() == 0) {
                    flights[i] = FlightBooking(id, value);
                    placed = true;
                    break;
                }
            }
            if (!placed)
                cout << "Cannot perform this operation: maximum number of flights reached" << endl;

        } else if (action == "delete") {
            bool found = false;
            for (int i = 0; i < MAX_FLIGHTS; ++i) {
                if (flights[i].getId() == id) {
                    flights[i].deleteFlight();
                    found = true;
                    break;
                }
            }
            if (!found)
                cout << "Cannot perform this operation: flight not found" << endl;

        } else if (action == "add" || action == "cancel") {
            bool found = false;
            for (int i = 0; i < MAX_FLIGHTS; ++i) {
                if (flights[i].getId() == id) {
                    bool ok = (action == "add") ?
                        flights[i].addReservations(value) :
                        flights[i].cancelReservations(value);
                    if (!ok)
                        cout << "Cannot perform this operation" << endl;
                    found = true;
                    break;
                }
            }
            if (!found)
                cout << "Cannot perform this operation: flight not found" << endl;

        } else {
            cout << "Unknown command" << endl;
        }

        // Print all existing flights
        for (int i = 0; i < MAX_FLIGHTS; ++i) {
            if (flights[i].getId() != 0)
                flights[i].printStatus();
        }
    }

    return 0;
}
